import json
import os
import streamlit as st
from PIL import Image
import base64
import io
from src.text_to_image import LandmarkProcessor

# Initialize the LandmarkProcessor with API keys
processor = LandmarkProcessor(
    api_key=os.getenv('LLMAPIKEY'), 
    replicate_api_token=os.getenv('REPLICATEAPIKEY')
)

# Initialize session state
if "images" not in st.session_state:
    st.session_state.images = []
if "json_data_list" not in st.session_state:
    st.session_state.json_data_list = []

# Title and Instructions
st.title("AI-Generated Landmark Images")
st.info("""
#### NOTE:
1. Enter the name of a landmark to generate AI-created images.
2. Generated images can be downloaded by right-clicking and selecting "Save image as."
3. A carousel will display the AI-generated images with captions.
4. Details about the landmark, generated by an LLM, will be displayed below the carousel.
""")

# Form for user input
with st.form(key='form'):
    prompt = st.text_input('Enter the name of a landmark:')
    num_images = st.number_input('Number of images to generate:', min_value=1, max_value=5, value=1)
    submit_button = st.form_submit_button('Generate Images')

# Generate and store images in session state
if submit_button:
    if prompt:
        st.write(f"Generating {num_images} image(s) for the prompt: **{prompt}**")

        with st.spinner('Generating images...'):
            st.session_state.images = []  # Clear previous images
            st.session_state.json_data_list = []  # Clear previous JSON data

            for i in range(num_images):
                try:
                    image_path, landmark_json = processor.process_landmark(prompt)
                    image = Image.open(image_path)
                    st.session_state.images.append(image)
                    st.session_state.json_data_list.append(landmark_json)
                except Exception as e:
                    st.error(f"Error generating image {i + 1}: {e}")

# Display images and JSON data
if st.session_state.images:
    # Swiper.js carousel
    swiper_css = '''
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
    <style>
        .swiper-container { width: 100%; height: 1100px; }
        .swiper-slide { text-align: center; background: #fff; display: flex; flex-direction: column; justify-content: center; align-items: center; }
        .swiper-slide img { width: 100%; height: 100%; object-fit: cover; }
        .carousel-caption { background: rgba(0,0,0,0.7); color: #fff; padding: 10px; text-align: center; font-size: 24px; }
    </style>
    '''
    swiper_js = '''
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
    <script>
        var swiper = new Swiper('.swiper-container', {
            loop: true,
            pagination: { el: '.swiper-pagination', clickable: true },
            navigation: { nextEl: '.swiper-button-next', prevEl: '.swiper-button-prev' }
        });
    </script>
    '''
    html_code = '<div class="swiper-container"><div class="swiper-wrapper">'
    for idx, (img, caption) in enumerate(zip(st.session_state.images, 
                                             [data.get('image_generation_prompt', f"Image {i+1}") 
                                              for i, data in enumerate(st.session_state.json_data_list)])):
        buffered = io.BytesIO()
        img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        html_code += f'''
        <div class="swiper-slide">
            <img src="data:image/png;base64,{img_str}" alt="{caption}">
            <div class="carousel-caption">{caption}</div>
        </div>
        '''
    html_code += '</div><div class="swiper-pagination"></div><div class="swiper-button-next"></div><div class="swiper-button-prev"></div></div>'
    

    st.components.v1.html(f"{swiper_css}{html_code}{swiper_js}", height=1150)
    # Display landmark details
    if st.session_state.json_data_list:
        st.subheader("Landmark Details")
        formatted_text = "\n\n".join(
            f"**{key.capitalize()}**: {value}" 
            for key, value in st.session_state.json_data_list[0].items() if key != "error"
        )
        st.markdown(formatted_text)

    

    # Display JSON download button
    if st.session_state.json_data_list:
        json_data = json.dumps(st.session_state.json_data_list[0], indent=4)
        st.download_button(
            label="Download JSON",
            data=json_data,
            file_name="landmark_details.json",
            mime="application/json"
        )